---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Thomas Ludwig.
--- DateTime: 30.04.2023 17:14
---

local config = require("config")
local sensors = config["sensors"]
local displays = config["displays"]
local upSensor = config["upSensor"]
local downSensor = config["downSensor"]
local clutchOut = config["clutchOut"]
local gearOut = config["gearOut"]
local currentFloor = 0
local isMoving = false
local targetFloor = -1

term.write("Elevator OS 1.0 - Core")



--- fix lua missing round
math.round = function(n)
    return math.floor(n + 0.5)
end



--- Elevator Sensor Scans
function scanSensors ()
    local isSensorTriggered = false
    local upSensorPeri = peripheral.wrap(upSensor)
    local downSensorPeri = peripheral.wrap(downSensor)
    local touchInput = rs.getAnalogueInput("right")

    for index = 1, #(sensors) do
        local sensorTriggered = scanSensor(index)

        if sensorTriggered == true then
            isSensorTriggered = true
            currentFloor = index
        end
    end

    if isSensorTriggered == false then
        currentFloor = 0
        goFloor(#(sensors))
    else
        checkPosition()
    end

    if checkInvertedSensor(upSensorPeri) then
        goFloor(currentFloor + 1)
    end

    if checkInvertedSensor(downSensorPeri) then
        goFloor(currentFloor - 1)
    end

    if touchInput > 0 and touchInput ~= currentFloor then
        goFloor(touchInput)
    end
end
function checkInvertedSensor(sensor)
    local firstItem = sensor.getItemDetail(1)
    if not firstItem then
        return true
    end

    return false
end
function scanSensor(index)
    if(peripheral.isPresent(sensors[index]) == false) then
        print("sensor " .. index .. " is missing, skipping!")
        return false
    end

    local sensor = peripheral.wrap(sensors[index])
    local firstItem = sensor.getItemDetail(1)
    if not firstItem then
        ---print("sensor " .. index .. " is empty, skipping!")
        return false
    end

    --print("sensor "..index.." got triggered!")

    return true
end



--- monitor function
function updateMonitors()
    for index = 1, #(displays) do
        local display = peripheral.wrap(displays[index])
        display.clear()
        display.setBackgroundColor(colors.black)
        display.setTextScale(1)

        display.setCursorPos(1,5)

        if currentFloor ~= index and isMoving == false then
            display.blit("call me","fffffff","9999999")
        end

        if isMoving then
            display.blit("is busy","fffffff","9999999")
        end

        display.setCursorPos(1,3)

        local x,y = display.getSize()
        local x2,y2 = display.getCursorPos()
        local text = "..."

        if isMoving == false then
            text = ""..currentFloor
        end

        display.setTextColor(colors.cyan)
        display.setCursorPos(math.round((x / 2) - (text:len() / 2)) + 1, y2)
        display.write(text)
    end
end



--- clutch function
function toggleClutch()
    local clutchComputer = peripheral.wrap(clutchOut)

    if clutchComputer.isOn() then
        clutchComputer.shutdown()
    else
        clutchComputer.turnOn()
    end
end
function isClutchEngaged()
    local clutchComputer = peripheral.wrap(clutchOut)
    return clutchComputer.isOn()
end



--- direction functions
function toggleDirection()
    local directionComputer = peripheral.wrap(gearOut)

    if directionComputer.isOn() then
        directionComputer.shutdown()
    else
        directionComputer.turnOn()
    end
end

function isGearUp()
    local directionComputer = peripheral.wrap(gearOut)
    return directionComputer.isOn()
end



--- dev stuff
function debugPeripheralNames()
    local names = peripheral.getNames()

    for index = 1, #(names) do
        if string.find(names[index], "dropper") then
            print(names[index])
        end
    end
end



--- move functions
function goFloor(target)
    if isMoving then
        return
    end

    if target < 1 then
        return
    end

    if target > #(sensors) then
        return
    end

    if target > currentFloor then
        if isGearUp() == false then
            toggleDirection()
        end
    else
        if isGearUp() then
            toggleDirection()
        end
    end

    --print("move elevator from "..currentFloor.." to "..target)

    isMoving = true
    targetFloor = target
    toggleClutch()
end

function checkPosition()
    if currentFloor ~= targetFloor then
        return
    end

    if isMoving == false then
        return
    end

    if isClutchEngaged() == true then
        return
    end

    if targetFloor == 1 then
        toggleClutch()
        isMoving = false
        return
    end

    if targetFloor == #(sensors) then
        toggleClutch()
        isMoving = false
        return
    end

    toggleClutch()
    isMoving = false
end



--- init
if isClutchEngaged() == false then
    toggleClutch()
end

if isGearUp() == false then
    toggleDirection()
end

scanSensors()
updateMonitors()

goFloor(#(sensors))

while true do
    scanSensors()
    updateMonitors()
end